<?xml version="1.0" encoding="UTF-8"?>
<project name="DB-Connection-Watcher" default="phpunit">

    <property name="workspace.dir" value="/var/jenkins_home/workspace/DB-Connection-Watcher"/>

    <property name="postgresql.url" value="https://github.com/postgres/postgres"/>
    <property name="postgresql.git" value="${workspace.dir}/postgresql.git"/>
    <property name="postgresql.install.dir" value="${postgresql.git}/${postgresql.version}"/>
    <property name="postgresql.data.dir" value="${postgresql.install.dir}/data"/>
    <property name="postgresql.configure.args" value=" --prefix=${postgresql.install.dir} --with-pgport=${postgresql.port}"/>

    <property name="testsuite.name" value="db_connection_watcher_testsuite"/>

    <property name="phpcs.standard" value="PSR2"/>
    <property name="phpcs.ignore" value="*.xml,*.md,.idea/*,*.gitignore,.git/*,tests/*,vendor/*,*.json,*.lock,doc/*,reports/*"/>

    <property name="success.code" value="0"/>

    <target name="git_status">
        <exec command="git symbolic-ref --short HEAD" outputProperty="git.branch"/>
        <echo msg="On branch ${git.branch}."/>
        <exec command="git log --pretty=format:'%h' -n 1" outputProperty="git.hash"/>
        <echo msg="Building commit ${git.hash}."/>
    </target>

    <target name="postgresql_cleanup">
        <exec command="rm --dir --recursive --force ${postgresql.data.dir}"/>
    </target>

    <target name="postgresql_pull">
        <mkdir dir="${postgresql.git}"/>
        <exec command="git init" dir="${postgresql.git}"/>
        <exec command="git remote add origin ${postgresql.url}" dir="${postgresql.git}"/>
        <exec command="git pull --all" dir="${postgresql.git}" outputProperty="postgresql_pull.output"/>
        <echo msg="${postgresql_pull.output}"/>
    </target>

    <target name="postgresql_install" depends="postgresql_cleanup,postgresql_pull">
        <exec command="git checkout --force ${postgresql.version}" dir="${postgresql.git}" outputProperty="postgresql_install.checkout.output"/>
        <echo msg="${postgresql_install.checkout.output}"/>

        <exec command="./configure ${postgresql.configure.args}" dir="${postgresql.git}" outputProperty="postgresql_install.configure.output"/>
        <echo msg="${postgresql_install.configure.output}"/>

        <exec command="make" dir="${postgresql.git}" outputProperty="postgresql_install.make.output"/>
        <echo msg="${postgresql_install.make.output}"/>

        <exec command="make install" dir="${postgresql.git}" outputProperty="make.install.output"/>
        <echo msg="${make.install.output}"/>
    </target>

    <target name="postgresql_init" depends="postgresql_install">
        <exec command="./initdb --pgdata=${postgresql.data.dir}" dir="${postgresql.install.dir}/bin" outputProperty="postgresql_init.initdb.output"/>
        <echo msg="${postgresql_init.initdb.output}"/>

        <exec command="./postgres -D ${postgresql.data.dir} &gt; /dev/null 2&gt;&amp;1 &amp;" dir="${postgresql.install.dir}/bin" returnProperty="postgresql.pid" outputProperty="postgresql_init.postgres.output"/>
        <echo msg="${postgresql_init.postgres.output}"/>

        <exec command="sleep 10" description="Incredibly dirty workaround to 'wait' until the database system is set up."/>

        <exec command="./createuser -p ${postgresql.port} -s postgres" dir="${postgresql.install.dir}/bin" outputProperty="createuser.output"/>
        <echo msg="${createuser.output}"/>
    </target>

    <target name="phpunit" depends="postgresql_init">
        <exec command="mkdir -p ${workspace.dir}/reports/"/>
        <exec command="mkdir -p ${workspace.dir}/reports/coverage"/>
        <exec command="phpunit --testsuite ${testsuite.name}
                               --coverage-html ${workspace.dir}/reports/coverage
                               --coverage-clover ${workspace.dir}/reports/coverage/coverage.xml
                               --log-junit ${workspace.dir}/reports/phpunit/phpunit.xml"
                dir="${workspace.dir}" returnProperty="phpunit.status" outputProperty="phpunit.output"/>
        <if>
            <not>
                <equals arg1="${phpunit.status}" arg2="${success.code}"/>
            </not>
            <then>
                <fail message="${phpunit.output}"/>
            </then>
        </if>
        <echo msg="${phpunit.output}"/>
    </target>

    <target name="postgresql_stop" depends="phpunit">
        <exec command="killp ${postgresql.pid}"/>
    </target>

    <target name="phpcs">
        <exec command="vendor/bin/phpcs -v --standard=${phpcs.standard} --ignore=${phpcs.ignore} ./" dir="${workspace.dir}" returnProperty="phpcs.status" outputProperty="phpcs.output"/>
        <if>
            <not>
                <equals arg1="${phpcs.status}" arg2="${success.code}"/>
            </not>
            <then>
                <fail message="${phpcs.output}"/>
            </then>
        </if>
        <echo msg="${phpcs.output}"/>
    </target>

    <target name="all" depends="postgresql_stop,phpcs"/>

</project>
